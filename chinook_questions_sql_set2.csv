"Question","SQL"
"What are the names of all customers who made purchases in 2011?","SELECT DISTINCT Customer.FirstName, Customer.LastName FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId WHERE strftime('%Y', Invoice.InvoiceDate) = '2011' ORDER BY Customer.LastName"
"Which tracks have never been purchased?","SELECT Track.Name, Track.TrackId FROM Track LEFT JOIN InvoiceLine ON Track.TrackId = InvoiceLine.TrackId WHERE InvoiceLine.InvoiceLineId IS NULL"
"What is the average invoice amount by country?","SELECT BillingCountry, AVG(Total) AS AverageAmount FROM Invoice GROUP BY BillingCountry ORDER BY AverageAmount DESC"
"Which media type has generated the most revenue?","SELECT MediaType.Name, SUM(InvoiceLine.UnitPrice * InvoiceLine.Quantity) AS Revenue FROM MediaType JOIN Track ON MediaType.MediaTypeId = Track.MediaTypeId JOIN InvoiceLine ON Track.TrackId = InvoiceLine.TrackId GROUP BY MediaType.MediaTypeId ORDER BY Revenue DESC LIMIT 1"
"How many playlists does each track appear in?","SELECT Track.Name, COUNT(PlaylistTrack.PlaylistId) AS PlaylistCount FROM Track LEFT JOIN PlaylistTrack ON Track.TrackId = PlaylistTrack.TrackId GROUP BY Track.TrackId ORDER BY PlaylistCount DESC"
"Find all employees who have sold over $100 to a single customer","SELECT DISTINCT Employee.FirstName, Employee.LastName FROM Employee JOIN Customer ON Employee.EmployeeId = Customer.SupportRepId JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId GROUP BY Employee.EmployeeId, Customer.CustomerId HAVING SUM(Invoice.Total) > 100 ORDER BY Employee.LastName"
"Which albums don't have a track that costs more than $1?","SELECT DISTINCT Album.Title FROM Album JOIN Track ON Album.AlbumId = Track.AlbumId GROUP BY Album.AlbumId HAVING MAX(Track.UnitPrice) <= 1"
"List all tracks along with their album and artist names","SELECT Track.Name AS TrackName, Album.Title AS AlbumTitle, Artist.Name AS ArtistName FROM Track JOIN Album ON Track.AlbumId = Album.AlbumId JOIN Artist ON Album.ArtistId = Artist.ArtistId"
"What percentage of tracks in the database are audio files?","SELECT (COUNT(CASE WHEN MediaType.Name LIKE '%audio%' THEN 1 END) * 100.0 / COUNT(*)) AS AudioPercentage FROM Track JOIN MediaType ON Track.MediaTypeId = MediaType.MediaTypeId"
"Which customer spent the most in the first quarter of 2010?","SELECT Customer.FirstName, Customer.LastName, SUM(Invoice.Total) AS TotalSpent FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId WHERE Invoice.InvoiceDate BETWEEN '2010-01-01' AND '2010-03-31' GROUP BY Customer.CustomerId ORDER BY TotalSpent DESC LIMIT 1"
"List the number of customers supported by each employee","SELECT Employee.FirstName, Employee.LastName, COUNT(Customer.CustomerId) AS CustomerCount FROM Employee LEFT JOIN Customer ON Employee.EmployeeId = Customer.SupportRepId GROUP BY Employee.EmployeeId ORDER BY CustomerCount DESC"
"Which genres have the highest average track price?","SELECT Genre.Name, AVG(Track.UnitPrice) AS AveragePrice FROM Genre JOIN Track ON Genre.GenreId = Track.GenreId GROUP BY Genre.GenreId ORDER BY AveragePrice DESC"
"Find all customers who have purchased music from Queen","SELECT DISTINCT Customer.FirstName, Customer.LastName FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId JOIN InvoiceLine ON Invoice.InvoiceId = InvoiceLine.InvoiceId JOIN Track ON InvoiceLine.TrackId = Track.TrackId JOIN Album ON Track.AlbumId = Album.AlbumId JOIN Artist ON Album.ArtistId = Artist.ArtistId WHERE Artist.Name = 'Queen'"
"Which playlist has the most diverse genres?","SELECT Playlist.Name, COUNT(DISTINCT Track.GenreId) AS GenreCount FROM Playlist JOIN PlaylistTrack ON Playlist.PlaylistId = PlaylistTrack.PlaylistId JOIN Track ON PlaylistTrack.TrackId = Track.TrackId GROUP BY Playlist.PlaylistId ORDER BY GenreCount DESC LIMIT 1"
"List all invoices with more than 5 line items","SELECT Invoice.InvoiceId, Invoice.CustomerId, Invoice.Total, COUNT(InvoiceLine.InvoiceLineId) AS LineItemCount FROM Invoice JOIN InvoiceLine ON Invoice.InvoiceId = InvoiceLine.InvoiceId GROUP BY Invoice.InvoiceId HAVING COUNT(InvoiceLine.InvoiceLineId) > 5"
"What is the distribution of customers across states in the USA?","SELECT State, COUNT(*) AS CustomerCount FROM Customer WHERE Country = 'USA' GROUP BY State ORDER BY CustomerCount DESC"
"Find tracks that appear in multiple playlists","SELECT Track.Name, COUNT(DISTINCT PlaylistTrack.PlaylistId) AS PlaylistCount FROM Track JOIN PlaylistTrack ON Track.TrackId = PlaylistTrack.TrackId GROUP BY Track.TrackId HAVING COUNT(DISTINCT PlaylistTrack.PlaylistId) > 1 ORDER BY PlaylistCount DESC"
"Which artists have tracks in multiple genres?","SELECT Artist.Name, COUNT(DISTINCT Track.GenreId) AS GenreCount FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId JOIN Track ON Album.AlbumId = Track.AlbumId GROUP BY Artist.ArtistId HAVING COUNT(DISTINCT Track.GenreId) > 1 ORDER BY GenreCount DESC"
"List all customers who have spent more than the average customer","WITH AverageSpend AS (SELECT AVG(CustomerTotal) AS AvgSpend FROM (SELECT Customer.CustomerId, SUM(Invoice.Total) AS CustomerTotal FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId GROUP BY Customer.CustomerId)) SELECT Customer.FirstName, Customer.LastName, SUM(Invoice.Total) AS TotalSpent FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId GROUP BY Customer.CustomerId HAVING TotalSpent > (SELECT AvgSpend FROM AverageSpend) ORDER BY TotalSpent DESC"
"What is the most common billing postal code in Germany?","SELECT BillingPostalCode, COUNT(*) AS Frequency FROM Invoice WHERE BillingCountry = 'Germany' GROUP BY BillingPostalCode ORDER BY Frequency DESC LIMIT 1"
"Which customers have the same postal code?","SELECT c1.FirstName, c1.LastName, c2.FirstName, c2.LastName, c1.PostalCode FROM Customer c1 JOIN Customer c2 ON c1.PostalCode = c2.PostalCode WHERE c1.CustomerId < c2.CustomerId AND c1.PostalCode IS NOT NULL ORDER BY c1.PostalCode"
"Find all tracks that are longer than the average track length","SELECT Name, Milliseconds FROM Track WHERE Milliseconds > (SELECT AVG(Milliseconds) FROM Track) ORDER BY Milliseconds DESC"
"Which customer has purchased the most distinct artists?","SELECT Customer.FirstName, Customer.LastName, COUNT(DISTINCT Artist.ArtistId) AS ArtistCount FROM Customer JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId JOIN InvoiceLine ON Invoice.InvoiceId = InvoiceLine.InvoiceId JOIN Track ON InvoiceLine.TrackId = Track.TrackId JOIN Album ON Track.AlbumId = Album.AlbumId JOIN Artist ON Album.ArtistId = Artist.ArtistId GROUP BY Customer.CustomerId ORDER BY ArtistCount DESC LIMIT 1"
"List all albums that have fewer than 5 tracks","SELECT Album.Title, COUNT(Track.TrackId) AS TrackCount FROM Album JOIN Track ON Album.AlbumId = Track.AlbumId GROUP BY Album.AlbumId HAVING COUNT(Track.TrackId) < 5 ORDER BY TrackCount"
"What's the total revenue from each year?","SELECT strftime('%Y', InvoiceDate) AS Year, SUM(Total) AS YearlyRevenue FROM Invoice GROUP BY Year ORDER BY Year"
"Which composer has the most tracks in the database?","SELECT Composer, COUNT(TrackId) AS TrackCount FROM Track WHERE Composer IS NOT NULL GROUP BY Composer ORDER BY TrackCount DESC LIMIT 1"
"Find customers who haven't made a purchase since 2012","SELECT Customer.* FROM Customer LEFT JOIN Invoice ON Customer.CustomerId = Invoice.CustomerId AND Invoice.InvoiceDate >= '2012-01-01' WHERE Invoice.InvoiceId IS NULL ORDER BY Customer.LastName"
"What's the sales trend by quarter over the last three years?","SELECT strftime('%Y', InvoiceDate) AS Year, 'Q' || ((strftime('%m', InvoiceDate) + 2) / 3) AS Quarter, SUM(Total) AS QuarterlyRevenue FROM Invoice WHERE InvoiceDate >= date('now', '-3 years') GROUP BY Year, Quarter ORDER BY Year, Quarter"
"Which tracks appear in the most playlists?","SELECT Track.Name, COUNT(DISTINCT PlaylistTrack.PlaylistId) AS PlaylistCount FROM Track JOIN PlaylistTrack ON Track.TrackId = PlaylistTrack.TrackId GROUP BY Track.TrackId ORDER BY PlaylistCount DESC LIMIT 10"
"Find all invoices that contain tracks from more than 3 different genres","SELECT Invoice.InvoiceId, COUNT(DISTINCT Track.GenreId) AS GenreCount FROM Invoice JOIN InvoiceLine ON Invoice.InvoiceId = InvoiceLine.InvoiceId JOIN Track ON InvoiceLine.TrackId = Track.TrackId GROUP BY Invoice.InvoiceId HAVING COUNT(DISTINCT Track.GenreId) > 3"
